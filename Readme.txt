Basis - это фреймворк для игр любых жанров, который включает в себя следующие системы:

MonoUpdater:
Класс (MonoBehaviour), создаётся как глобальный неуничтожаемый объект в ProjectContext.
Имеет три события, которые вызываются в Update, FixedUpdate, LateUpdate. 

ViewModelFinder:
Класс (MonoBehaviour), создаётся как глобальный неуничтожаемый объект в ProjectContext.
Ищет объекты на сцене по типу в единственном или во множественном числе.

Assembler:
Класс (MonoBehaviour) для инициализации сервисов или AsseblerPart классов.
Assembler асинхронно запускает очередь объектов реализуемых интрефейс IAssemlerPart.

Service:
Абстрактный сервис для обработки бизнес-логики. 
При создании сервиса, метод Run, подписывается на одно из событий MonoUpdater.
Сервисы нужно создавать для определённой задачи, прописывая обновляемую логику в методе ProcessRun.
Сервис можно ставить на паузу. Рекомендовано использовать один сервис для контроля ряда других.

DataStorage:
Обобщённая система сохранения прогресса игрока в JSON формате. Хранит IData объекты. 
Данные загружаются при инициализации хранилища в ProjectContext.
Сохраняет данные в автоматическом режиме, при изменении хоть одного значения в IData объекте.

Localization:
Является загружаемой частью IAssemlerPart.
Система локализации состоит из:
 - LocalizationData - хранит словарь в словаре нужных для перевода текстов.
 - LocalizationDataProvider - извлекающий данные перевода из CSV файла.
 Загрузка проходит асинхронно, так как она запускается из очереди Assembler-а.
 После загрузки, с помощью ViewModelFinder находит все модели на сцене с типом LocalizableViewModel
 и с помощью рефлексии переводит все типы string, которые были обнаружены в загруженном словаре.
 
FSM:
Через фабрику StateMachine.Factory можно создать конечную машину состояний.
Машина состояний состоит из:
 - State - состояние, которое содержит логику входа, обновления и выхода.
 При создании состояние в конструкторе нужно указать строковый код стостояний, 
 который можно спарсить из созданного вами enum, через класс-помощник Parser и его метода GetEnumName.
 После создания состояние необходимо вызвать методы SetEnter, SetUpdate и SetExit.
 А так же метод SetTransitions, для добавление логики перехода.